#!/usr/bin/python
#
# Calculate lookup table for Thermistors
#
#     ----- +ve
#     |
#    ---
#   |   |   Thermistor(R1)
#    ---
#     |
#     ------ Vsense            
#     |
#    ---
#   |   | Rl
#    ---
#     |
#     -------- 0V
#
#
#
#---------------------------------------------------------------------------------------------------------------------------    
import math
import datetime

# Some constants
AZ=273.15
T1=AZ+25

def fmt(v):
  av = math.fabs(v)
  if av>=1e6:
    return "{:.2f}M".format(v/1e6)
  elif av>=1e3:
    return "{:.2f}k".format(v/1e3)
  else:
      return "{:.2f}R".format(v)

def fmtshort(v):
  av = math.fabs(v)
  if av>=1e6:
    return "{:.0f}M".format(v/1e6)
  elif av>=1e3:
    return "{:.0f}k".format(v/1e3)
  else:
      return "{:.0f}R".format(v)

#===================================================================
class TabGen:
    #---------------------------------------------------------------------------------------------------------------------------    
    def __init__(self,Rth,B, Rl, adcbits, tblbits, invert=False, vnom=3.3, type="int16_t", tscale=100, rtype="float"):
        self.Rth = Rth
        self.B = B
        self.Rl = Rl
        self.adcbits = adcbits
        self.tblbits = tblbits
        self.rbits = adcbits-tblbits
        self.invert = invert
        self.ADCMAX = (1 << adcbits)-1
        self.vnom = vnom
        self.type = type
        self.itext = "inverted" if invert else ""
        self.tsize = (1 << tblbits)
        self.tscale = tscale
        self.rthstr = fmt(Rth)
        self.rlstr = fmt(Rl)
        self.rtype = "float"
        
    #---------------------------------------------------------------------------------------------------------------------------    
    #
    # Compute resistance at temp
    def resAtTemp(self,t):
        x = (1.0/T1-1.0/(t+AZ))
        return self.Rl/math.exp(self.B*x)        
    #---------------------------------------------------------------------------------------------------------------------------    
    #
    # Compute temp for given resistance
    #
    def tempForRes(self, r):
        t2 = 1/(1/T1- math.log(self.Rl/r)/self.B)
        return t2-AZ        
    #---------------------------------------------------------------------------------------------------------------------------    
    #
    # Actual ADC count for any given temp
    #
    def countsAtTemp(self, t):
        vfrac = self.Rl/(self.Rl+self.resAtTemp(t))
        
        cfrac = ADCMAX*vf
        
        if self.invert:
            cfrac = ADCMAX - cfrac
            
        return int(ac+0.5)
    #---------------------------------------------------------------------------------------------------------------------------    
    #
    # Temperatue given the actual ADC count
    #
    def tempForCounts(self, ac):
        if self.invert:
            ac = self.ADCMAX - ac
            
        vfrac = ac/self.ADCMAX
          
        rth = self.Rl*(1/vfrac-1)
                        
        #print("TempForRes ", locals() )
        return self.tempForRes(rth)
    
    #---------------------------------------------------------------------------------------------------------------------------    
    def genTable(self, fn):
        print("table:",fn)
        of = open(fn+".cpp","w")
        of.write("""
/**
 @file 
   AUTOGENERATED Thermistor table
   
   Rth          = {rthstr}
   B            = {B}
   Rload        = {rlstr}
   Inverted     = {invert}
   ADC bits     = {adcbits}
   Table bits   = {tblbits}
   Temp Scaled  = x{tscale}
 */        
""".format(**vars(self))) 

        of.write("""

#include "{0}.h"        


const {1} {0}::_table[] = {{
""".format(fn, self.type))

        cscale = 1<<self.tblbits
        
        for i in range(0,self.tsize):
          c = i*cscale
          comment =""
          if i==0:
              t = self.tempForCounts(0.5*cscale) # fake
              comment =" INACCURATE"
          else:
              t = self.tempForCounts(c)
              
          if i == self.tsize-1:
              comment =" INACCURATE"
            
          ts = int(t*self.tscale+0.5)
          r = fmt(self.resAtTemp(t))
          
          if i>=1 and i<self.tsize-1:
            # reasonably valid
            c2 = (i+1)*cscale
            t2 = self.tempForCounts(c2)
            eps = (t2-t)/(1<<self.rbits)
            epsf = " {0:.4f}C/c".format(eps)
          else:
            epsf = ""
          
          
          of.write("  {ts:8d}, // #{i} c={c} t={t:.2f}C r={r}{epsf} {comment}\n".format(
                **locals()
            ))
            
          print(i)

        of.write("""
\n}};

// static instance
{fn} {fn}::_instance;

""".format(**vars()));        
        
        of.close()
    #---------------------------------------------------------------------------------------------------------------------------    
    def genHeader(self,fn):
        print("header:",fn)
        of = open(fn+".h","w")
        of.write("""
/**
 @file 
   AUTOGENERATED Thermistor table
   
   Rth          = {rthstr}
   B            = {B}
   Rload        = {rlstr}
   Inverted     = {invert}
   ADC bits     = {adcbits}
   Table bits   = {tblbits}
   Temp Scaled  = x{tscale}
 */        
#include "InterpolatedLookup.h"
 
class {fn} : public InterpolatedLookup1DBits<{type}, {rtype}, {adcbits}, {rbits}>
{{
    typedef InterpolatedLookup1DBits<{type},{rtype}, {adcbits}, {rbits}> Base;
    
    static const {type} _table[];
    
public:
    {fn}() : Base(_table, {tscale})
    {{}}
    
    static {fn} _instance;
    
}};



""".format(**vars(self))) 
        
        of.close()
    #---------------------------------------------------------------------------------------------------------------------------    
    def generate(self, fn=None):
      if fn==None:
        
        self.fn = fn = "TempTable{0}B{1}{2}x{3}".format( fmtshort(self.Rth),self.B,self.itext, self.tscale)        
        self.genTable(fn)
        self.genHeader(fn)
        
        
    #---------------------------------------------------------------------------------------------------------------------------    
#===================================================================
if __name__=="__main__":
  t = TabGen(100000,3950,100000,10,5)
  t.generate()  
  
  t = TabGen(100000,3950,100000,10,5, tscale=128)
  t.generate()