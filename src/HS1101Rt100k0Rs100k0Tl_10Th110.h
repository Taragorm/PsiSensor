/** @file
  @@brief HS1101 humidity sensor and thermistor
  Generated by H!1101.py <built-in method utcnow of type object at 0x00007FFCE3E07BA0>
  */
#ifndef _HS1101Rt100k0Rs100k0Tl_10Th110_table_H
#define _HS1101Rt100k0Rs100k0Tl_10Th110_table_H

#include <stdint.h>
#include "HS1101.h"

//=========================================================================================================================
/** @brief
 * Data class for HS1101
 */     
class HS1101Rt100k0Rs100k0Tl_10Th110Data 
{
public:
    static const uint16_t _therm_table_size    =    28; ///< Entries in thermistor table
    static const uint16_t _therm_table_scale   =   127; ///< Thermistor table values are multiplied by this value
    static const uint16_t _therm_table_locount =   128; ///< ADC count for lowest bucket
    static const uint16_t _therm_table_hicount =   992; ///< ADC count for highest bucket
    static const uint16_t _therm_table_rbits   =     5; ///< Bits in the residue
    static const uint16_t _therm_table_rmask   =    31; ///< Mask for the residue


    static const uint16_t _humid_table_sizeT   =    13; ///< Entries in dim0 of Humidity table (temp index)
    static const int16_t  _humid_table_tmin    =   -10; ///< low temp in table (temp for first row)
    static const int16_t  _humid_table_tmax    =   110; ///< hi temp in table (temp for last row)
    static const int16_t  _humid_table_tminsc  = -1270; ///< low temp, scaled as per thermistor table (x127)
    static const int16_t  _humid_table_tmaxsc  = 13970; ///< hi temp scaled as per thermistor table (x127)
    static const int16_t  _humid_table_stepT   =    10; ///< Temperature distance between two rows
    static const int16_t  _humid_table_stepTsc =  1270; ///< Temperature distance between two rows, scaled (x127)
                      
    static const uint16_t _humid_table_sizeH   =    24; ///< Entries in dim1 of Humidity table (freq indexed)
    static const uint16_t _humid_table_locount =  8500; ///< Offset of first bucket (counts in interval)
    static const uint16_t _humid_table_hicount = 10800; ///< Offset of last bucket (counts in interval)
    static const int16_t  _humid_table_stepH   =   100; ///< # counts between column values
    static const uint16_t _humid_table_scale   =   256; ///< Humidity table values are multiplied by this value
    static const int16_t _humid_max_raw        = 25600; ///< Humidity table values are multiplied by this value
    
    // CStray =  0Pf

    /// Scale a raw temp to Â°C
    constexpr static double scaleTemp(int16_t raw) { return raw * 0.007874015748031496; }
                      
    /// Scale a raw RH to RH% 
    constexpr static double scaleHumid(int16_t raw) { return raw * 0.00390625; }
                      
protected:                      
    static const int16_t  _therm_table[_therm_table_size];
    static const int16_t  _hs1101_table[_humid_table_sizeT][_humid_table_sizeH];

    
};

//=========================================================================================================================
/**
 Concrete HS1101 class with logic included
 */
class HS1101Rt100k0Rs100k0Tl_10Th110 : public HS1101<HS1101Rt100k0Rs100k0Tl_10Th110Data>
{
};
//=========================================================================================================================
                      
#endif
